// Code generated by mockery v2.43.1. DO NOT EDIT.

package mockeventproc

import (
	eventproc "github.com/dr-dobermann/gobpm/internal/eventproc"
	flow "github.com/dr-dobermann/gobpm/pkg/model/flow"

	mock "github.com/stretchr/testify/mock"
)

// MockEventProducer is an autogenerated mock type for the EventProducer type
type MockEventProducer struct {
	mock.Mock
}

type MockEventProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventProducer) EXPECT() *MockEventProducer_Expecter {
	return &MockEventProducer_Expecter{mock: &_m.Mock}
}

// PropogateEvents provides a mock function with given fields: events
func (_m *MockEventProducer) PropogateEvents(events ...flow.EventDefinition) error {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PropogateEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...flow.EventDefinition) error); ok {
		r0 = rf(events...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventProducer_PropogateEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropogateEvents'
type MockEventProducer_PropogateEvents_Call struct {
	*mock.Call
}

// PropogateEvents is a helper method to define mock.On call
//   - events ...flow.EventDefinition
func (_e *MockEventProducer_Expecter) PropogateEvents(events ...interface{}) *MockEventProducer_PropogateEvents_Call {
	return &MockEventProducer_PropogateEvents_Call{Call: _e.mock.On("PropogateEvents",
		append([]interface{}{}, events...)...)}
}

func (_c *MockEventProducer_PropogateEvents_Call) Run(run func(events ...flow.EventDefinition)) *MockEventProducer_PropogateEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]flow.EventDefinition, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(flow.EventDefinition)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEventProducer_PropogateEvents_Call) Return(_a0 error) *MockEventProducer_PropogateEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventProducer_PropogateEvents_Call) RunAndReturn(run func(...flow.EventDefinition) error) *MockEventProducer_PropogateEvents_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEvents provides a mock function with given fields: _a0, _a1
func (_m *MockEventProducer) RegisterEvents(_a0 eventproc.EventProcessor, _a1 ...flow.EventDefinition) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(eventproc.EventProcessor, ...flow.EventDefinition) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventProducer_RegisterEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEvents'
type MockEventProducer_RegisterEvents_Call struct {
	*mock.Call
}

// RegisterEvents is a helper method to define mock.On call
//   - _a0 eventproc.EventProcessor
//   - _a1 ...flow.EventDefinition
func (_e *MockEventProducer_Expecter) RegisterEvents(_a0 interface{}, _a1 ...interface{}) *MockEventProducer_RegisterEvents_Call {
	return &MockEventProducer_RegisterEvents_Call{Call: _e.mock.On("RegisterEvents",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockEventProducer_RegisterEvents_Call) Run(run func(_a0 eventproc.EventProcessor, _a1 ...flow.EventDefinition)) *MockEventProducer_RegisterEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]flow.EventDefinition, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(flow.EventDefinition)
			}
		}
		run(args[0].(eventproc.EventProcessor), variadicArgs...)
	})
	return _c
}

func (_c *MockEventProducer_RegisterEvents_Call) Return(_a0 error) *MockEventProducer_RegisterEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventProducer_RegisterEvents_Call) RunAndReturn(run func(eventproc.EventProcessor, ...flow.EventDefinition) error) *MockEventProducer_RegisterEvents_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterEvents provides a mock function with given fields: _a0, _a1
func (_m *MockEventProducer) UnregisterEvents(_a0 eventproc.EventProcessor, _a1 ...string) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(eventproc.EventProcessor, ...string) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventProducer_UnregisterEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterEvents'
type MockEventProducer_UnregisterEvents_Call struct {
	*mock.Call
}

// UnregisterEvents is a helper method to define mock.On call
//   - _a0 eventproc.EventProcessor
//   - _a1 ...string
func (_e *MockEventProducer_Expecter) UnregisterEvents(_a0 interface{}, _a1 ...interface{}) *MockEventProducer_UnregisterEvents_Call {
	return &MockEventProducer_UnregisterEvents_Call{Call: _e.mock.On("UnregisterEvents",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockEventProducer_UnregisterEvents_Call) Run(run func(_a0 eventproc.EventProcessor, _a1 ...string)) *MockEventProducer_UnregisterEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(eventproc.EventProcessor), variadicArgs...)
	})
	return _c
}

func (_c *MockEventProducer_UnregisterEvents_Call) Return(_a0 error) *MockEventProducer_UnregisterEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventProducer_UnregisterEvents_Call) RunAndReturn(run func(eventproc.EventProcessor, ...string) error) *MockEventProducer_UnregisterEvents_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterProcessor provides a mock function with given fields: _a0
func (_m *MockEventProducer) UnregisterProcessor(_a0 eventproc.EventProcessor) {
	_m.Called(_a0)
}

// MockEventProducer_UnregisterProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterProcessor'
type MockEventProducer_UnregisterProcessor_Call struct {
	*mock.Call
}

// UnregisterProcessor is a helper method to define mock.On call
//   - _a0 eventproc.EventProcessor
func (_e *MockEventProducer_Expecter) UnregisterProcessor(_a0 interface{}) *MockEventProducer_UnregisterProcessor_Call {
	return &MockEventProducer_UnregisterProcessor_Call{Call: _e.mock.On("UnregisterProcessor", _a0)}
}

func (_c *MockEventProducer_UnregisterProcessor_Call) Run(run func(_a0 eventproc.EventProcessor)) *MockEventProducer_UnregisterProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(eventproc.EventProcessor))
	})
	return _c
}

func (_c *MockEventProducer_UnregisterProcessor_Call) Return() *MockEventProducer_UnregisterProcessor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventProducer_UnregisterProcessor_Call) RunAndReturn(run func(eventproc.EventProcessor)) *MockEventProducer_UnregisterProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventProducer creates a new instance of MockEventProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventProducer {
	mock := &MockEventProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
