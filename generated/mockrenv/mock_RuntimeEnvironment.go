// Code generated by mockery v2.43.1. DO NOT EDIT.

package mockrenv

import (
	eventproc "github.com/dr-dobermann/gobpm/internal/eventproc"
	data "github.com/dr-dobermann/gobpm/pkg/model/data"

	mock "github.com/stretchr/testify/mock"

	scope "github.com/dr-dobermann/gobpm/internal/scope"
)

// MockRuntimeEnvironment is an autogenerated mock type for the RuntimeEnvironment type
type MockRuntimeEnvironment struct {
	mock.Mock
}

type MockRuntimeEnvironment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntimeEnvironment) EXPECT() *MockRuntimeEnvironment_Expecter {
	return &MockRuntimeEnvironment_Expecter{mock: &_m.Mock}
}

// AddData provides a mock function with given fields: _a0, _a1
func (_m *MockRuntimeEnvironment) AddData(_a0 scope.NodeDataLoader, _a1 ...data.Data) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader, ...data.Data) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeEnvironment_AddData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddData'
type MockRuntimeEnvironment_AddData_Call struct {
	*mock.Call
}

// AddData is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
//   - _a1 ...data.Data
func (_e *MockRuntimeEnvironment_Expecter) AddData(_a0 interface{}, _a1 ...interface{}) *MockRuntimeEnvironment_AddData_Call {
	return &MockRuntimeEnvironment_AddData_Call{Call: _e.mock.On("AddData",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockRuntimeEnvironment_AddData_Call) Run(run func(_a0 scope.NodeDataLoader, _a1 ...data.Data)) *MockRuntimeEnvironment_AddData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]data.Data, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(data.Data)
			}
		}
		run(args[0].(scope.NodeDataLoader), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeEnvironment_AddData_Call) Return(_a0 error) *MockRuntimeEnvironment_AddData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_AddData_Call) RunAndReturn(run func(scope.NodeDataLoader, ...data.Data) error) *MockRuntimeEnvironment_AddData_Call {
	_c.Call.Return(run)
	return _c
}

// EventProducer provides a mock function with given fields:
func (_m *MockRuntimeEnvironment) EventProducer() eventproc.EventProducer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventProducer")
	}

	var r0 eventproc.EventProducer
	if rf, ok := ret.Get(0).(func() eventproc.EventProducer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventproc.EventProducer)
		}
	}

	return r0
}

// MockRuntimeEnvironment_EventProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventProducer'
type MockRuntimeEnvironment_EventProducer_Call struct {
	*mock.Call
}

// EventProducer is a helper method to define mock.On call
func (_e *MockRuntimeEnvironment_Expecter) EventProducer() *MockRuntimeEnvironment_EventProducer_Call {
	return &MockRuntimeEnvironment_EventProducer_Call{Call: _e.mock.On("EventProducer")}
}

func (_c *MockRuntimeEnvironment_EventProducer_Call) Run(run func()) *MockRuntimeEnvironment_EventProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeEnvironment_EventProducer_Call) Return(_a0 eventproc.EventProducer) *MockRuntimeEnvironment_EventProducer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_EventProducer_Call) RunAndReturn(run func() eventproc.EventProducer) *MockRuntimeEnvironment_EventProducer_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendScope provides a mock function with given fields: _a0
func (_m *MockRuntimeEnvironment) ExtendScope(_a0 scope.NodeDataLoader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ExtendScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeEnvironment_ExtendScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendScope'
type MockRuntimeEnvironment_ExtendScope_Call struct {
	*mock.Call
}

// ExtendScope is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
func (_e *MockRuntimeEnvironment_Expecter) ExtendScope(_a0 interface{}) *MockRuntimeEnvironment_ExtendScope_Call {
	return &MockRuntimeEnvironment_ExtendScope_Call{Call: _e.mock.On("ExtendScope", _a0)}
}

func (_c *MockRuntimeEnvironment_ExtendScope_Call) Run(run func(_a0 scope.NodeDataLoader)) *MockRuntimeEnvironment_ExtendScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.NodeDataLoader))
	})
	return _c
}

func (_c *MockRuntimeEnvironment_ExtendScope_Call) Return(_a0 error) *MockRuntimeEnvironment_ExtendScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_ExtendScope_Call) RunAndReturn(run func(scope.NodeDataLoader) error) *MockRuntimeEnvironment_ExtendScope_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: dataPath, name
func (_m *MockRuntimeEnvironment) GetData(dataPath scope.DataPath, name string) (data.Data, error) {
	ret := _m.Called(dataPath, name)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 data.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) (data.Data, error)); ok {
		return rf(dataPath, name)
	}
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) data.Data); ok {
		r0 = rf(dataPath, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(scope.DataPath, string) error); ok {
		r1 = rf(dataPath, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeEnvironment_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockRuntimeEnvironment_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - dataPath scope.DataPath
//   - name string
func (_e *MockRuntimeEnvironment_Expecter) GetData(dataPath interface{}, name interface{}) *MockRuntimeEnvironment_GetData_Call {
	return &MockRuntimeEnvironment_GetData_Call{Call: _e.mock.On("GetData", dataPath, name)}
}

func (_c *MockRuntimeEnvironment_GetData_Call) Run(run func(dataPath scope.DataPath, name string)) *MockRuntimeEnvironment_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.DataPath), args[1].(string))
	})
	return _c
}

func (_c *MockRuntimeEnvironment_GetData_Call) Return(_a0 data.Data, _a1 error) *MockRuntimeEnvironment_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeEnvironment_GetData_Call) RunAndReturn(run func(scope.DataPath, string) (data.Data, error)) *MockRuntimeEnvironment_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataById provides a mock function with given fields: dataPath, id
func (_m *MockRuntimeEnvironment) GetDataById(dataPath scope.DataPath, id string) (data.Data, error) {
	ret := _m.Called(dataPath, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDataById")
	}

	var r0 data.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) (data.Data, error)); ok {
		return rf(dataPath, id)
	}
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) data.Data); ok {
		r0 = rf(dataPath, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(scope.DataPath, string) error); ok {
		r1 = rf(dataPath, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeEnvironment_GetDataById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataById'
type MockRuntimeEnvironment_GetDataById_Call struct {
	*mock.Call
}

// GetDataById is a helper method to define mock.On call
//   - dataPath scope.DataPath
//   - id string
func (_e *MockRuntimeEnvironment_Expecter) GetDataById(dataPath interface{}, id interface{}) *MockRuntimeEnvironment_GetDataById_Call {
	return &MockRuntimeEnvironment_GetDataById_Call{Call: _e.mock.On("GetDataById", dataPath, id)}
}

func (_c *MockRuntimeEnvironment_GetDataById_Call) Run(run func(dataPath scope.DataPath, id string)) *MockRuntimeEnvironment_GetDataById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.DataPath), args[1].(string))
	})
	return _c
}

func (_c *MockRuntimeEnvironment_GetDataById_Call) Return(_a0 data.Data, _a1 error) *MockRuntimeEnvironment_GetDataById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeEnvironment_GetDataById_Call) RunAndReturn(run func(scope.DataPath, string) (data.Data, error)) *MockRuntimeEnvironment_GetDataById_Call {
	_c.Call.Return(run)
	return _c
}

// InstanceId provides a mock function with given fields:
func (_m *MockRuntimeEnvironment) InstanceId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InstanceId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRuntimeEnvironment_InstanceId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstanceId'
type MockRuntimeEnvironment_InstanceId_Call struct {
	*mock.Call
}

// InstanceId is a helper method to define mock.On call
func (_e *MockRuntimeEnvironment_Expecter) InstanceId() *MockRuntimeEnvironment_InstanceId_Call {
	return &MockRuntimeEnvironment_InstanceId_Call{Call: _e.mock.On("InstanceId")}
}

func (_c *MockRuntimeEnvironment_InstanceId_Call) Run(run func()) *MockRuntimeEnvironment_InstanceId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeEnvironment_InstanceId_Call) Return(_a0 string) *MockRuntimeEnvironment_InstanceId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_InstanceId_Call) RunAndReturn(run func() string) *MockRuntimeEnvironment_InstanceId_Call {
	_c.Call.Return(run)
	return _c
}

// LeaveScope provides a mock function with given fields: _a0
func (_m *MockRuntimeEnvironment) LeaveScope(_a0 scope.NodeDataLoader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LeaveScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeEnvironment_LeaveScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaveScope'
type MockRuntimeEnvironment_LeaveScope_Call struct {
	*mock.Call
}

// LeaveScope is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
func (_e *MockRuntimeEnvironment_Expecter) LeaveScope(_a0 interface{}) *MockRuntimeEnvironment_LeaveScope_Call {
	return &MockRuntimeEnvironment_LeaveScope_Call{Call: _e.mock.On("LeaveScope", _a0)}
}

func (_c *MockRuntimeEnvironment_LeaveScope_Call) Run(run func(_a0 scope.NodeDataLoader)) *MockRuntimeEnvironment_LeaveScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.NodeDataLoader))
	})
	return _c
}

func (_c *MockRuntimeEnvironment_LeaveScope_Call) Return(_a0 error) *MockRuntimeEnvironment_LeaveScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_LeaveScope_Call) RunAndReturn(run func(scope.NodeDataLoader) error) *MockRuntimeEnvironment_LeaveScope_Call {
	_c.Call.Return(run)
	return _c
}

// LoadData provides a mock function with given fields: _a0, _a1
func (_m *MockRuntimeEnvironment) LoadData(_a0 scope.NodeDataLoader, _a1 ...data.Data) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoadData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader, ...data.Data) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeEnvironment_LoadData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadData'
type MockRuntimeEnvironment_LoadData_Call struct {
	*mock.Call
}

// LoadData is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
//   - _a1 ...data.Data
func (_e *MockRuntimeEnvironment_Expecter) LoadData(_a0 interface{}, _a1 ...interface{}) *MockRuntimeEnvironment_LoadData_Call {
	return &MockRuntimeEnvironment_LoadData_Call{Call: _e.mock.On("LoadData",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockRuntimeEnvironment_LoadData_Call) Run(run func(_a0 scope.NodeDataLoader, _a1 ...data.Data)) *MockRuntimeEnvironment_LoadData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]data.Data, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(data.Data)
			}
		}
		run(args[0].(scope.NodeDataLoader), variadicArgs...)
	})
	return _c
}

func (_c *MockRuntimeEnvironment_LoadData_Call) Return(_a0 error) *MockRuntimeEnvironment_LoadData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_LoadData_Call) RunAndReturn(run func(scope.NodeDataLoader, ...data.Data) error) *MockRuntimeEnvironment_LoadData_Call {
	_c.Call.Return(run)
	return _c
}

// Root provides a mock function with given fields:
func (_m *MockRuntimeEnvironment) Root() scope.DataPath {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Root")
	}

	var r0 scope.DataPath
	if rf, ok := ret.Get(0).(func() scope.DataPath); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(scope.DataPath)
	}

	return r0
}

// MockRuntimeEnvironment_Root_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Root'
type MockRuntimeEnvironment_Root_Call struct {
	*mock.Call
}

// Root is a helper method to define mock.On call
func (_e *MockRuntimeEnvironment_Expecter) Root() *MockRuntimeEnvironment_Root_Call {
	return &MockRuntimeEnvironment_Root_Call{Call: _e.mock.On("Root")}
}

func (_c *MockRuntimeEnvironment_Root_Call) Run(run func()) *MockRuntimeEnvironment_Root_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeEnvironment_Root_Call) Return(_a0 scope.DataPath) *MockRuntimeEnvironment_Root_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_Root_Call) RunAndReturn(run func() scope.DataPath) *MockRuntimeEnvironment_Root_Call {
	_c.Call.Return(run)
	return _c
}

// Scopes provides a mock function with given fields:
func (_m *MockRuntimeEnvironment) Scopes() []scope.DataPath {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scopes")
	}

	var r0 []scope.DataPath
	if rf, ok := ret.Get(0).(func() []scope.DataPath); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]scope.DataPath)
		}
	}

	return r0
}

// MockRuntimeEnvironment_Scopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scopes'
type MockRuntimeEnvironment_Scopes_Call struct {
	*mock.Call
}

// Scopes is a helper method to define mock.On call
func (_e *MockRuntimeEnvironment_Expecter) Scopes() *MockRuntimeEnvironment_Scopes_Call {
	return &MockRuntimeEnvironment_Scopes_Call{Call: _e.mock.On("Scopes")}
}

func (_c *MockRuntimeEnvironment_Scopes_Call) Run(run func()) *MockRuntimeEnvironment_Scopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRuntimeEnvironment_Scopes_Call) Return(_a0 []scope.DataPath) *MockRuntimeEnvironment_Scopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeEnvironment_Scopes_Call) RunAndReturn(run func() []scope.DataPath) *MockRuntimeEnvironment_Scopes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuntimeEnvironment creates a new instance of MockRuntimeEnvironment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntimeEnvironment {
	mock := &MockRuntimeEnvironment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
