// Code generated by mockery v2.46.2. DO NOT EDIT.

package mockscope

import (
	data "github.com/dr-dobermann/gobpm/pkg/model/data"
	mock "github.com/stretchr/testify/mock"

	scope "github.com/dr-dobermann/gobpm/internal/scope"
)

// MockScope is an autogenerated mock type for the Scope type
type MockScope struct {
	mock.Mock
}

type MockScope_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScope) EXPECT() *MockScope_Expecter {
	return &MockScope_Expecter{mock: &_m.Mock}
}

// AddData provides a mock function with given fields: _a0, _a1
func (_m *MockScope) AddData(_a0 scope.NodeDataLoader, _a1 ...data.Data) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader, ...data.Data) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScope_AddData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddData'
type MockScope_AddData_Call struct {
	*mock.Call
}

// AddData is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
//   - _a1 ...data.Data
func (_e *MockScope_Expecter) AddData(_a0 interface{}, _a1 ...interface{}) *MockScope_AddData_Call {
	return &MockScope_AddData_Call{Call: _e.mock.On("AddData",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockScope_AddData_Call) Run(run func(_a0 scope.NodeDataLoader, _a1 ...data.Data)) *MockScope_AddData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]data.Data, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(data.Data)
			}
		}
		run(args[0].(scope.NodeDataLoader), variadicArgs...)
	})
	return _c
}

func (_c *MockScope_AddData_Call) Return(_a0 error) *MockScope_AddData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScope_AddData_Call) RunAndReturn(run func(scope.NodeDataLoader, ...data.Data) error) *MockScope_AddData_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendScope provides a mock function with given fields: _a0
func (_m *MockScope) ExtendScope(_a0 scope.NodeDataLoader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ExtendScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScope_ExtendScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendScope'
type MockScope_ExtendScope_Call struct {
	*mock.Call
}

// ExtendScope is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
func (_e *MockScope_Expecter) ExtendScope(_a0 interface{}) *MockScope_ExtendScope_Call {
	return &MockScope_ExtendScope_Call{Call: _e.mock.On("ExtendScope", _a0)}
}

func (_c *MockScope_ExtendScope_Call) Run(run func(_a0 scope.NodeDataLoader)) *MockScope_ExtendScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.NodeDataLoader))
	})
	return _c
}

func (_c *MockScope_ExtendScope_Call) Return(_a0 error) *MockScope_ExtendScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScope_ExtendScope_Call) RunAndReturn(run func(scope.NodeDataLoader) error) *MockScope_ExtendScope_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: dataPath, name
func (_m *MockScope) GetData(dataPath scope.DataPath, name string) (data.Data, error) {
	ret := _m.Called(dataPath, name)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 data.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) (data.Data, error)); ok {
		return rf(dataPath, name)
	}
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) data.Data); ok {
		r0 = rf(dataPath, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(scope.DataPath, string) error); ok {
		r1 = rf(dataPath, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScope_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockScope_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - dataPath scope.DataPath
//   - name string
func (_e *MockScope_Expecter) GetData(dataPath interface{}, name interface{}) *MockScope_GetData_Call {
	return &MockScope_GetData_Call{Call: _e.mock.On("GetData", dataPath, name)}
}

func (_c *MockScope_GetData_Call) Run(run func(dataPath scope.DataPath, name string)) *MockScope_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.DataPath), args[1].(string))
	})
	return _c
}

func (_c *MockScope_GetData_Call) Return(_a0 data.Data, _a1 error) *MockScope_GetData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScope_GetData_Call) RunAndReturn(run func(scope.DataPath, string) (data.Data, error)) *MockScope_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataById provides a mock function with given fields: dataPath, id
func (_m *MockScope) GetDataById(dataPath scope.DataPath, id string) (data.Data, error) {
	ret := _m.Called(dataPath, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDataById")
	}

	var r0 data.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) (data.Data, error)); ok {
		return rf(dataPath, id)
	}
	if rf, ok := ret.Get(0).(func(scope.DataPath, string) data.Data); ok {
		r0 = rf(dataPath, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Data)
		}
	}

	if rf, ok := ret.Get(1).(func(scope.DataPath, string) error); ok {
		r1 = rf(dataPath, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScope_GetDataById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataById'
type MockScope_GetDataById_Call struct {
	*mock.Call
}

// GetDataById is a helper method to define mock.On call
//   - dataPath scope.DataPath
//   - id string
func (_e *MockScope_Expecter) GetDataById(dataPath interface{}, id interface{}) *MockScope_GetDataById_Call {
	return &MockScope_GetDataById_Call{Call: _e.mock.On("GetDataById", dataPath, id)}
}

func (_c *MockScope_GetDataById_Call) Run(run func(dataPath scope.DataPath, id string)) *MockScope_GetDataById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.DataPath), args[1].(string))
	})
	return _c
}

func (_c *MockScope_GetDataById_Call) Return(_a0 data.Data, _a1 error) *MockScope_GetDataById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScope_GetDataById_Call) RunAndReturn(run func(scope.DataPath, string) (data.Data, error)) *MockScope_GetDataById_Call {
	_c.Call.Return(run)
	return _c
}

// LeaveScope provides a mock function with given fields: _a0
func (_m *MockScope) LeaveScope(_a0 scope.NodeDataLoader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LeaveScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScope_LeaveScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaveScope'
type MockScope_LeaveScope_Call struct {
	*mock.Call
}

// LeaveScope is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
func (_e *MockScope_Expecter) LeaveScope(_a0 interface{}) *MockScope_LeaveScope_Call {
	return &MockScope_LeaveScope_Call{Call: _e.mock.On("LeaveScope", _a0)}
}

func (_c *MockScope_LeaveScope_Call) Run(run func(_a0 scope.NodeDataLoader)) *MockScope_LeaveScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scope.NodeDataLoader))
	})
	return _c
}

func (_c *MockScope_LeaveScope_Call) Return(_a0 error) *MockScope_LeaveScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScope_LeaveScope_Call) RunAndReturn(run func(scope.NodeDataLoader) error) *MockScope_LeaveScope_Call {
	_c.Call.Return(run)
	return _c
}

// LoadData provides a mock function with given fields: _a0, _a1
func (_m *MockScope) LoadData(_a0 scope.NodeDataLoader, _a1 ...data.Data) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoadData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scope.NodeDataLoader, ...data.Data) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScope_LoadData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadData'
type MockScope_LoadData_Call struct {
	*mock.Call
}

// LoadData is a helper method to define mock.On call
//   - _a0 scope.NodeDataLoader
//   - _a1 ...data.Data
func (_e *MockScope_Expecter) LoadData(_a0 interface{}, _a1 ...interface{}) *MockScope_LoadData_Call {
	return &MockScope_LoadData_Call{Call: _e.mock.On("LoadData",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockScope_LoadData_Call) Run(run func(_a0 scope.NodeDataLoader, _a1 ...data.Data)) *MockScope_LoadData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]data.Data, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(data.Data)
			}
		}
		run(args[0].(scope.NodeDataLoader), variadicArgs...)
	})
	return _c
}

func (_c *MockScope_LoadData_Call) Return(_a0 error) *MockScope_LoadData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScope_LoadData_Call) RunAndReturn(run func(scope.NodeDataLoader, ...data.Data) error) *MockScope_LoadData_Call {
	_c.Call.Return(run)
	return _c
}

// Root provides a mock function with given fields:
func (_m *MockScope) Root() scope.DataPath {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Root")
	}

	var r0 scope.DataPath
	if rf, ok := ret.Get(0).(func() scope.DataPath); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(scope.DataPath)
	}

	return r0
}

// MockScope_Root_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Root'
type MockScope_Root_Call struct {
	*mock.Call
}

// Root is a helper method to define mock.On call
func (_e *MockScope_Expecter) Root() *MockScope_Root_Call {
	return &MockScope_Root_Call{Call: _e.mock.On("Root")}
}

func (_c *MockScope_Root_Call) Run(run func()) *MockScope_Root_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScope_Root_Call) Return(_a0 scope.DataPath) *MockScope_Root_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScope_Root_Call) RunAndReturn(run func() scope.DataPath) *MockScope_Root_Call {
	_c.Call.Return(run)
	return _c
}

// Scopes provides a mock function with given fields:
func (_m *MockScope) Scopes() []scope.DataPath {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scopes")
	}

	var r0 []scope.DataPath
	if rf, ok := ret.Get(0).(func() []scope.DataPath); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]scope.DataPath)
		}
	}

	return r0
}

// MockScope_Scopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scopes'
type MockScope_Scopes_Call struct {
	*mock.Call
}

// Scopes is a helper method to define mock.On call
func (_e *MockScope_Expecter) Scopes() *MockScope_Scopes_Call {
	return &MockScope_Scopes_Call{Call: _e.mock.On("Scopes")}
}

func (_c *MockScope_Scopes_Call) Run(run func()) *MockScope_Scopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScope_Scopes_Call) Return(_a0 []scope.DataPath) *MockScope_Scopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScope_Scopes_Call) RunAndReturn(run func() []scope.DataPath) *MockScope_Scopes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScope creates a new instance of MockScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScope {
	mock := &MockScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
